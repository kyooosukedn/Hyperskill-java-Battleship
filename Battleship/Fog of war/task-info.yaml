type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;
    import java.util.Scanner;
    import java.util.stream.IntStream;

    public class Main {
        static char[][] gameField = new char[10][10];

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            for (int i = 0; i < gameField.length; i++) {
                for (int j = 0; j < gameField.length; j++) {
                    gameField[i][j] = '~';
                }
            }
            printGameField();
            /*
            1. initiate String[gameSize][gameSize] game array
    fill it with fog for each row use
    Arrays.setAll(row, i -> "~");
    2. from user take coords String[] (use nextLine() with split)
    3. then translate String[] to rows int[] and col[]
    use IntStream.rangeClosed( charAt(0)) - 65 , charAt(0)) - 65 ).toArray() for rows
    use IntStream.rangeClosed( substring - 1, substring - 1 ).toArray() for columns
    -----
    so now you end up with smth like [0, 1, 2, 3, 4] and [0] taken for first ship (if placed in top left corner horizontally)
    4. using nested loop iterate through these two int[] arrays and draw "O"
             */
            // Place Aircraft Carrier
            while (true) {
                System.out.println("Enter the coordinates of The Aircraft Carrier (5 cells): ");
                String input = scanner.nextLine();
                String[] coordinates = input.split(" ");
                if (coordinates.length != 2) {
                    System.out.println("Error! Invalid number of coordinates");
                    continue;
                }
                int row1 = coordinates[0].charAt(0) - 'A';
                int col1 = coordinates[0].charAt(1) - '1';
                int row2 = coordinates[1].charAt(0) - 'A';
                int col2 = coordinates[1].charAt(1) - '1';
                if (row1 < 0 || row1 > 9 || col1 < 0 || col1 > 9 || row2 < 0 || row2 > 9 || col2 < 0 || col2 > 9) {
                    System.out.println("Error! Coordinates are out of bounds.");
                    continue;
                }
                if (row1 != row2 && col1 != col2) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    continue;
                }

                int length = Math.max(Math.abs(row1 - row2) + 1, Math.abs(col1 - col2) + 1);
                if (length != 5) {
                    System.out.println("Error! Wrong length of the Aircraft Carrier! Try again:");
                    continue;
                }
                int rowMin = Math.min(row1, row2);
                int rowMax = Math.max(row1, row2);
                int colMin = Math.min(col1, col2);
                int colMax = Math.max(col1, col2);

                if (row1 == row2) {
                    for (int col = colMin; col <= colMax; col++) {
                        if (gameField[row1][col] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row1][col] = 'O';
                    }
                } else {
                    for (int row = rowMin; row <= rowMax; row++) {
                        if (gameField[row][col1] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row][col1] = 'O';
                    }
                }
                printGameField();
                break;
            }

    // Place the remaining ships (Battleship, Submarine, Cruiser, and Destroyer) using the same process
            // Place Battleship
            while (true) {
                System.out.println("Enter the coordinates of Battleship (4 cells): ");
                String input = scanner.nextLine();
                String[] coordinates = input.split(" ");
                if (coordinates.length != 2) {
                    System.out.println("Error! Invalid number of coordinates");
                    continue;
                }
                int row1 = coordinates[0].charAt(0) - 'A';
                int col1 = coordinates[0].charAt(1) - '1';
                int row2 = coordinates[1].charAt(0) - 'A';
                int col2 = coordinates[1].charAt(1) - '1';
                if (row1 < 0 || row1 > 9 || col1 < 0 || col1 > 9 || row2 < 0 || row2 > 9 || col2 < 0 || col2 > 9) {
                    System.out.println("Error! Coordinates are out of bounds.");
                    continue;
                }
                if (row1 != row2 && col1 != col2) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    continue;
                }

                int length = Math.max(Math.abs(row1 - row2) + 1, Math.abs(col1 - col2) + 1);
                if (length != 4) {
                    System.out.println("Error! Wrong length of Battleship! Try again:");
                    continue;
                }
                int rowMin = Math.min(row1, row2);
                int rowMax = Math.max(row1, row2);
                int colMin = Math.min(col1, col2);
                int colMax = Math.max(col1, col2);

                if (row1 == row2) {
                    for (int col = colMin; col <= colMax; col++) {
                        if (gameField[row1][col] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row1][col] = 'O';
                    }
                } else {
                    for (int row = rowMin; row <= rowMax; row++) {
                        if (gameField[row][col1] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row][col1] = 'O';
                    }
                }
                printGameField();
                break;
            }

            // Place Submarine
            while (true) {
                System.out.println("Enter the coordinates of Submarine (3 cells): ");
                String input = scanner.nextLine();
                String[] coordinates = input.split(" ");
                if (coordinates.length != 2) {
                    System.out.println("Error! Invalid number of coordinates");
                    continue;
                }
                int row1 = coordinates[0].charAt(0) - 'A';
                int col1 = coordinates[0].charAt(1) - '1';
                int row2 = coordinates[1].charAt(0) - 'A';
                int col2 = coordinates[1].charAt(1) - '1';
                if (row1 < 0 || row1 > 9 || col1 < 0 || col1 > 9 || row2 < 0 || row2 > 9 || col2 < 0 || col2 > 9) {
                    System.out.println("Error! Coordinates are out of bounds.");
                    continue;
                }
                if (row1 != row2 && col1 != col2) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    continue;
                }

                //int length = Math.max(Math.abs(row1 - row2) + 1, Math.abs(col1 - col2) + 1);
                int length = 0;
                if (row1 == row2) {
                    // The ship is aligned horizontallz
                    length = Math.abs(col2 - col1) + 1;
                } else {
                    // The ship is aligned vertically
                    length = Math.abs(row2 - row1) + 1;
                }


                if (length != 3) {
                    System.out.println("Error! Wrong length of Submarine! Try again:");
                    continue;
                }
                int rowMin = Math.min(row1, row2);
                int rowMax = Math.max(row1, row2);
                int colMin = Math.min(col1, col2);
                int colMax = Math.max(col1, col2);

                if (row1 == row2) {
                    for (int col = colMin; col <= colMax; col++) {
                        if (gameField[row1][col] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row1][col] = 'O';
                    }
                } else {
                    for (int row = rowMin; row <= rowMax; row++) {
                        if (gameField[row][col1] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row][col1] = 'O';
                    }
                }
                printGameField();
                break;
            }

            // Place Cruiser
            while (true) {
                System.out.println("Enter the coordinates of Cruiser (3 cells): ");
                String input = scanner.nextLine();
                String[] coordinates = input.split(" ");
                if (coordinates.length != 2) {
                    System.out.println("Error! Invalid number of coordinates");
                    continue;
                }
                int row1 = coordinates[0].charAt(0) - 'A';
                int col1 = coordinates[0].charAt(1) - '1';
                int row2 = coordinates[1].charAt(0) - 'A';
                int col2 = coordinates[1].charAt(1) - '1';
                if (row1 < 0 || row1 > 9 || col1 < 0 || col1 > 9 || row2 < 0 || row2 > 9 || col2 < 0 || col2 > 9) {
                    System.out.println("Error! Coordinates are out of bounds.");
                    continue;
                }
                if (row1 != row2 && col1 != col2) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    continue;
                }

                int length = Math.max(Math.abs(row1 - row2) + 1, Math.abs(col1 - col2) + 1);
                if (length != 3) {
                    System.out.println("Error! Wrong length of Cruiser! Try again:");
                    continue;
                }
                int rowMin = Math.min(row1, row2);
                int rowMax = Math.max(row1, row2);
                int colMin = Math.min(col1, col2);
                int colMax = Math.max(col1, col2);

                if (row1 == row2) {
                    for (int col = colMin; col <= colMax; col++) {
                        if (gameField[row1][col] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row1][col] = 'O';
                    }
                } else {
                    for (int row = rowMin; row <= rowMax; row++) {
                        if (gameField[row][col1] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row][col1] = 'O';
                    }
                }
                printGameField();
                break;
            }

            // Place Destroyer
            while (true) {
                System.out.println("Enter the coordinates of Destroyer (2 cells): ");
                String input = scanner.nextLine();
                String[] coordinates = input.split(" ");
                if (coordinates.length != 2) {
                    System.out.println("Error! Invalid number of coordinates");
                    continue;
                }
                int row1 = coordinates[0].charAt(0) - 'A';
                int col1 = coordinates[0].charAt(1) - '1';
                int row2 = coordinates[1].charAt(0) - 'A';
                int col2 = coordinates[1].charAt(1) - '1';
                if (row1 < 0 || row1 > 9 || col1 < 0 || col1 > 9 || row2 < 0 || row2 > 9 || col2 < 0 || col2 > 9) {
                    System.out.println("Error! Coordinates are out of bounds.");
                    continue;
                }
                if (row1 != row2 && col1 != col2) {
                    System.out.println("Error! Wrong ship location! Try again:");
                    continue;
                }

                int length = Math.max(Math.abs(row1 - row2) + 1, Math.abs(col1 - col2) + 1);
                if (length != 2) {
                    System.out.println("Error! Wrong length of the Destroyer! Try again:");
                    continue;
                }
                int rowMin = Math.min(row1, row2);
                int rowMax = Math.max(row1, row2);
                int colMin = Math.min(col1, col2);
                int colMax = Math.max(col1, col2);

                if (row1 == row2) {
                    for (int col = colMin; col <= colMax; col++) {
                        if (gameField[row1][col] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row1][col] = 'O';
                    }
                } else {
                    for (int row = rowMin; row <= rowMax; row++) {
                        if (gameField[row][col1] != '~') {
                            System.out.println("Error! Cell is already occupied");
                            continue;
                        }
                        gameField[row][col1] = 'O';
                    }
                }
                printGameField();
                break;
            }

        }

        public static void printGameField() {
            char c = 'A';
            Scanner scanner = new Scanner(System.in);
            // First row
            for (int r = 1; r <= 10; r++) {
                if (r == 1) {
                    System.out.print(" ");
                }
                System.out.print(r + " ");
            }
            // Next starting from A
            for (int i = 0; i < 10; i++) {
                if (i == 0) {
                    System.out.println("");
                }
                System.out.print(c++ + " ");
                for (int j = 0; j < 10; j++) {
                    System.out.print(gameField[i][j] + " ");

                }
                System.out.println("");

                }

                System.out.println(" ");
        }
        /*
        public static boolean isCellOccupied(int beginningCoord, int index1, int lastCoord, int index2) {
            for (int i = x - 1; i <= y - 1; i++) {
                if (gameField[x -1][y - 1] != '~') {
                    return false;
                }
            }
            return true;
        }

        public static void placeCoord(int x, int y) {

        }

        public static void printCoord(String coord1, String coord2) {

        }

         */
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/Ship.java
  visible: true
  text: "package battleship;\n\npublic class Ship {\n\n    public static char[][]\
    \ board;\n\n    public void placeAShip() {\n        \n    }\n\n}\n"
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10596#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 12 Mar 2023 14:36:58 UTC"
record: 3
